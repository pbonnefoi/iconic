<?php

use Drupal\Core\Language\LanguageInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;

/**
 * @file
 * Functions to support theming.
 */

/**
 * Implements hook_preprocess_html().
 */
function iconic_preprocess_html(&$vars) {
  unset($vars['page']['#attached']['html_head_link']);
}

/**
 * Implements hook_preprocess_node().
 */
function iconic_preprocess_node(&$vars) {
  $node = &$vars['node'];
  if ($node instanceof Node && $node->bundle() == 'watch') {
    $vars['brand_logo_icon'] = NULL;
    $brands = $node->get('field_brand')->referencedEntities();
    $brand = reset($brands);
    if  ($brand instanceof Term) {
      $vars['brand_logo_icon'] = $brand->field_logo_icon->view('teaser');
    }
    $fieldMaterials = $node->get('field_material')->referencedEntities();
    $materials = [];
    foreach ($fieldMaterials as $material) {
      if  ($material instanceof Term) {
        $materials[] = humanToMachine($material->label());
      }
    }
    $vars['materials'] = $materials;
  }
  if ($node instanceof Node && $node->bundle() == 'article') {
    $vars['createdTime'] = $node->getCreatedTime();
    $articleCategories = $node->get('field_article_category')->referencedEntities();
    $categories = [];
    foreach ($articleCategories as $articleCategory) {
      if  ($articleCategory instanceof Term) {
        $categories[] = humanToMachine($articleCategory->label());
      }
    }
    $vars['articleCategory'] = implode(' ', $categories);
  }
  if ($node instanceof Node && $node->bundle() == 'instant') {
    $watches = $node->get('field_watch')->referencedEntities();
    $watchName = '';
    foreach ($watches as $watch) {
      if  ($watch instanceof Node) {
        $watchName = $watch->label();
        $brands = $watch->get('field_brand')->referencedEntities();
        $brand = reset($brands);
        if  ($brand instanceof Term) {
          $vars['brandName'] = $brand->label();
        }
      }
    }
    $vars['watchName'] = $watchName;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function iconic_preprocess_field(&$vars) {
  $field = &$vars['element'];
  if ($vars['field_name'] == 'field_style') {
    $vars['styles'] = [];
    $values = $field['#items']->getValue();
    $entityTypeManager = \Drupal::service('entity_type.manager');
    $termStorage = $entityTypeManager->getStorage('taxonomy_term');
    foreach ($values as $value) {
      if (isset($value['target_id'])) {
        $term = $termStorage->load($value['target_id']);
        if ($term instanceof Term) {
          $vars['styles'][] = [
            'icon' => $term->get('field_icon_name')->value,
            'label' => $term->label(),
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function iconic_theme_suggestions_views_view_alter(&$suggestions, $vars) {
  $suggestions[] = 'views_view__' . $vars['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_views_view_grid_alter().
 */
function iconic_theme_suggestions_views_view_grid_alter(&$suggestions, $vars) {
  $suggestions[] = 'views_view_grid__' . $vars['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function iconic_theme_suggestions_form_alter(&$suggestions, $vars) {
  $suggestions[] = 'form__' . $vars['element']['#form_id'];
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function iconic_theme_suggestions_node_alter(&$suggestions, $vars) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $vars['elements']['#node'];
  $sanitizedViewMode = strtr($vars['elements']['#view_mode'], '.', '_');
  if ($node->bundle() === 'article') {
    $articleCategory = $node->get('field_article_category')->first()->get('entity')->getTarget()->getValue();
    if ($articleCategory instanceof Term) {
      $articleType = humanToMachine($articleCategory->label());
      if ($articleType === 'paroles-de-collectionneur') {
        $articleType = 'no_cover';
      }
      $suggestions[] = 'node__' . $node->bundle() . '__' . $articleType;
      if ($sanitizedViewMode !== 'full') {
        $suggestions[] = 'node__' . $node->bundle() . '__' . $articleType . '__' . $sanitizedViewMode;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function iconic_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $vars) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $vars['elements']['#taxonomy_term'];
  $sanitizedViewMode = strtr($vars['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitizedViewMode;
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function iconic_theme_suggestions_field_alter(&$suggestions, $vars) {
  $fieldName = &$vars['element']['#field_name'];
  if ($fieldName == 'field_watches') {
    $paragraph = &$vars['element']['#object'];
    if ($paragraph instanceof Paragraph) {
      if ($paragraph->bundle() == 'watches' && $paragraph->hasField('field_slideshow') && $paragraph->field_slideshow->value === true) {
        $suggestions[] = 'field__' . $fieldName . '__slideshow';
      }
      else {
        $suggestions[] = 'field__' . $fieldName . '__grid';
      }
    }
  }
}

/**
 * Translate string to machine readable.
 *
 * @param string $human_name
 *   A string.
 *
 * @return string
 *   A machine readable string.
 */
function humanToMachine($human_name) {
  $transliteration = \Drupal::service('transliteration');
  $human_name = $transliteration->transliterate(strtolower($human_name), LanguageInterface::LANGCODE_DEFAULT, '-');
  $human_name = preg_replace([
    '/[^a-z0-9]+/',
    '/-+/',
    '/^-+/',
    '/-+$/',
  ], ['-', '-', '', ''], $human_name);

  return $human_name;
}
